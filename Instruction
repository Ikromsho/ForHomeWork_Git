# Команды используемые в git
## `git config`
Эта команда устанавливает имя автора и адрес электронной почты соответственно, которые будут использоваться с вашими коммитами.

Пример:
```
git config –global user.name “[name]”         
git config –global user.email “[email address]”
````
## `git init`
Эта команда используется для запуска нового репозитория.

Пример:

```
git init [repository name]
```

## `git clone`
Эта команда используется для получения репозитория по существующему URL-адресу.

Пример:

```
git clone [url] 
```

## `git add`
Эта команда добавляет файл в промежуточную область.

Пример:

```
git add [file]
```

Эта команда добавляет один или несколько файлов в промежуточную область.

Пример:

```
git add *
```


## `git commit`
Эта команда постоянно записывает или делает снимок файла в истории версий.

Пример:

```
git commit -m "[ Type in the commit message]"
```

Эта команда фиксирует все файлы, добавленные вами с помощью команды `git add`, а также любые файлы, которые вы изменили с тех пор.

Пример:

```
git commit -a "Comment"
```

Эта команда фиксирует все файлы, добавленные вами с помощью команды `git add` и добавляет сообщение, а также любые файлы, которые вы изменили с тех пор.

Пример:

```
git commit -am "[ Type in the commit message]"
```

## `git diff`
Эта команда показывает различия файлов, которые еще не проиндексированы.

Пример:

```
git diff
```

Эта команда показывает различия между файлами в промежуточной области и последней имеющейся версией.

Пример:

```
git diff --staged
```

Эта команда показывает различия между двумя упомянутыми ветвями.

Пример:

```
git diff [first branch] [second branch] 
```


## `git reset`
Эта команда удаляет файл из резервной копии, но сохраняет его содержимое.

Пример:

```
git reset [file] 
```

Эта команда отменяет все фиксации после указанной фиксации и сохраняет изменения локально.

Пример:

```
git reset [commit] 
```

Эта команда удаляет всю историю и возвращается к указанному коммиту.

Пример:

```
git reset --hard [commit]
```



## `git status`
Эта команда перечисляет все файлы, которые необходимо зафиксировать.

Пример:

```
git status
```


## `git rm`
Эта команда удаляет файл из вашего рабочего каталога и инициирует удаление.

Пример:

```
git rm [file]  
```


## `git log`
Эта команда используется для просмотра истории версий текущей ветки.

Пример:

```
git log
```

Эта команда выводит историю версий файла, включая переименование файлов.

Пример:

```
git log –follow[file]
```

Эта команда используется для просмотра истории версий текущей ветки в виде сокращенного, сжатого списка.

Пример:

```
git log –-oneline
```

Эта команда используется для просмотра истории версий текущей ветки в виде графа.

Пример:

```
git log –-graph
```


## `git show`
Эта команда показывает изменения метаданных и содержимого указанного коммита.

Пример:

```
git show [commit]
```



